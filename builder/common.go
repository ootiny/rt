package builder

import (
	"embed"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"gopkg.in/yaml.v3"
)

// embed assets
//
//go:embed all:assets
var assets embed.FS
var APIVersions = []string{"rt.api.v1"}
var DBVersions = []string{"rt.db.v1"}

const MainLocation = "main"
const DBPrefix = "DB."
const APIPrefix = "API."

func UnmarshalConfig(filePath string, v any) error {
	if content, err := os.ReadFile(filePath); err != nil {
		return err
	} else {
		switch filepath.Ext(filePath) {
		case ".json":
			return json.Unmarshal(content, v)
		case ".yaml", ".yml":
			return yaml.Unmarshal(content, v)
		default:
			return fmt.Errorf("unsupported file extension: %s", filepath.Ext(filePath))
		}
	}
}

func WriteJSONFile(filePath string, v any) error {
	if err := os.MkdirAll(filepath.Dir(filePath), 0755); err != nil {
		return fmt.Errorf("failed to create directory: %w", err)
	}

	content, err := json.MarshalIndent(v, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(filePath, content, 0644)
}

func WriteGeneratedFile(filePath string, content string) error {
	const BuilderStartTag = "tag-rt-api-builder-start"
	const BuilderEndTag = "tag-rt-api-builder-end"
	const BuilderDescription = "This file is generated by rt-builder, DO NOT EDIT."

	fileContent := fmt.Sprintf(
		"// %s: %s\n%s\n// %s",
		BuilderStartTag,
		BuilderDescription,
		content,
		BuilderEndTag,
	)

	// todo: create dir if not exists
	if err := os.MkdirAll(filepath.Dir(filePath), 0755); err != nil {
		return fmt.Errorf("failed to create directory: %w", err)
	}

	return os.WriteFile(filePath, []byte(fileContent), 0644)
}

func NamespaceToFolder(location string, namespace string) string {
	//  change all namespace to lowercase
	namespace = strings.ToLower(namespace)

	// replace . with _
	namespace = strings.ReplaceAll(namespace, ".", "_")

	if location == MainLocation {
		return namespace
	} else {
		return fmt.Sprintf("%s_%s", location, namespace)
	}
}
