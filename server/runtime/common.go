// tag-rt-api-builder-start: This file is generated by rt-builder, DO NOT EDIT.
package runtime

import (
	"encoding/json"
	"fmt"
	"net/http"
)

var gAPIMap = map[string]func(ctx *Context, data []byte) *Return{}

const ErrInternal = 1001
const ErrActionNotFound = 1002
const ErrActionNotImplemented = 1003
const ErrMethodNotSupported = 1004
const ErrReadData = 1005
const ErrUnmarshalData = 1006
const ErrAPIExec = 2001

type Error interface {
	GetCode() int
	Error() string
}

type Request interface {
	Action() string
	Cookie(name string) (*http.Cookie, error)
	Header(name string) string
}

type Response interface {
	SetHeader(name string, value string)
	WriteHeader(code int)
	WriteJson(data []byte) (int, error)
}

func NewContext(request Request, response Response) *Context {
	return &Context{
		request:  request,
		response: response,
	}
}

type Context struct {
	request  Request
	response Response
}

func (p *Context) Request() Request {
	return p.request
}

func (p *Context) Response() Response {
	return p.response
}

func (p *Context) Errorf(format string, args ...any) Error {
	return NewError(ErrInternal, fmt.Errorf(format, args...))
}

func (p *Context) ErrorWithCodef(code int, format string, args ...any) Error {
	return NewError(code, fmt.Errorf(format, args...))
}

type Return struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Data    any    `json:"data"`
}

type GoError struct {
	code int
	err  error
}

func NewError(code int, err error) Error {
	return &GoError{
		code: code,
		err:  err,
	}
}

func (p *GoError) GetCode() int {
	return p.code
}
func (p *GoError) Error() string {
	return p.err.Error()
}

func RegisterHandler(action string, handler func(ctx *Context, data []byte) *Return) {
	gAPIMap[action] = handler
}

func JsonUnmarshal(data []byte, v any) error {
	return json.Unmarshal(data, v)
}

// tag-rt-api-builder-end