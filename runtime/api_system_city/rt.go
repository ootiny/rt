// tag-rt-api-builder-start: This file is generated by rt-builder, DO NOT EDIT.
package api_system_city

import (
	"github.com/ootiny/rt/runtime/db_city"
	"github.com/ootiny/rt/runtime/rt"
)

// definition: API.System.City@CityList
type CityList struct {
	From int64 `json:"from" required:"true"`
	List []db_city.Full `json:"list" required:"true"`
}

// Action: API.System.City:Test
var fnTest FuncTest
type FuncTest = func() *rt.Error
func HookTest (fn FuncTest) {
	fnTest = fn
}

// Action: API.System.City:GetCityList
var fnGetCityList FuncGetCityList
type FuncGetCityList = func(country string) (CityList, *rt.Error)
func HookGetCityList (fn FuncGetCityList) {
	fnGetCityList = fn
}

func init() {
	rt.RegisterHandler("API.System.City:Test", func(ctx rt.IContext, response rt.IResponse, data []byte) *rt.Return {
		if fnTest == nil {
			return &rt.Return{Code: rt.ErrActionNotImplemented, Message: "API.System.City:Test is not implemented"}
		} else if err := fnTest(); err != nil {
			return &rt.Return{Code: err.GetCode(), Message: err.GetMessage()}
		} else {
			return &rt.Return{}
		}
	})
	rt.RegisterHandler("API.System.City:GetCityList", func(ctx rt.IContext, response rt.IResponse, data []byte) *rt.Return {
		var v struct {
			Country string `json:"country" required:"true"`
		}
		if err := rt.JsonUnmarshal(data, &v); err != nil {
			return nil
		}

		if fnGetCityList == nil {
			return &rt.Return{Code: rt.ErrActionNotImplemented, Message: "API.System.City:GetCityList is not implemented"}
		} else if result, err := fnGetCityList(v.Country); err != nil {
			return &rt.Return{Code: err.GetCode(), Message: err.GetMessage()}
		} else {
			return &rt.Return{Data: result}
		}
	})
}
//tag-rt-api-builder-end